name: Build FFmpeg 8.0 for iOS ARM64 (Jailbroken)

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-14  # Use latest macOS runner with better compatibility
    
    steps:
    - name: Checkout FFmpeg source
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.2'  # Latest stable version compatible with iOS 16.5
        
    - name: Install dependencies via Homebrew
      run: |
        # Update Homebrew first
        brew update
        
        # Fix cmake conflict if exists
        brew uninstall cmake || true
        
        # Install required build tools and libraries for HOST compilation
        brew install autoconf automake libtool pkg-config cmake nasm yasm
        
        # Install codec libraries that will be used as build dependencies
        # These are for the host system but will help us build iOS versions
        brew install x264 x265 libvpx opus libvorbis theora lame
        brew install libass freetype fontconfig fribidi
        brew install webp libxml2 zimg
        
        # Additional libraries for complete feature parity with 5.1.2
        brew install libsoxr || echo "libsoxr not available, will build from source"
        brew install rubberband || echo "rubberband not available, will build from source"  
        brew install snappy || echo "snappy not available, will build from source"
        brew install zeromq || echo "zeromq not available, will build from source"
        
        # Additional build tools
        brew install wget curl git
        
    - name: Setup iOS SDK paths
      run: |
        echo "XCODE_PATH=$(xcode-select -p)" >> $GITHUB_ENV
        echo "IOS_SDK_PATH=$(xcrun --sdk iphoneos --show-sdk-path)" >> $GITHUB_ENV
        echo "IOS_MIN_VERSION=12.0" >> $GITHUB_ENV
        echo "IOS_PREFIX=$PWD/ios-build" >> $GITHUB_ENV
        
    - name: Build iOS dependencies
      run: |
        mkdir -p ios-build
        export IOS_PREFIX=$PWD/ios-build
        export IOS_SDK_PATH="${IOS_SDK_PATH}"
        export IOS_MIN_VERSION="12.0"
        
        echo "Setting up iOS cross-compilation environment..."
        
        # iOS cross-compilation environment
        export CC="${XCODE_PATH}/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang"
        export CXX="${XCODE_PATH}/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang++"
        export AR="${XCODE_PATH}/Toolchains/XcodeDefault.xctoolchain/usr/bin/ar"
        export RANLIB="${XCODE_PATH}/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib"
        export STRIP="${XCODE_PATH}/Toolchains/XcodeDefault.xctoolchain/usr/bin/strip"
        
        # iOS compilation flags
        export CFLAGS="-arch arm64 -isysroot ${IOS_SDK_PATH} -mios-version-min=${IOS_MIN_VERSION} -fembed-bitcode"
        export CXXFLAGS="-arch arm64 -isysroot ${IOS_SDK_PATH} -mios-version-min=${IOS_MIN_VERSION} -fembed-bitcode"
        export LDFLAGS="-arch arm64 -isysroot ${IOS_SDK_PATH} -mios-version-min=${IOS_MIN_VERSION}"
        
        echo "Building x264 for iOS..."
        git clone --depth 1 https://code.videolan.org/videolan/x264.git
        cd x264
        ./configure \
          --host=arm-apple-darwin \
          --prefix="$IOS_PREFIX" \
          --enable-static \
          --disable-asm \
          --disable-opencl \
          --enable-pic
        make -j$(sysctl -n hw.ncpu) && make install
        cd ..
        
        echo "Building x265 for iOS..."
        git clone --depth 1 https://bitbucket.org/multicoreware/x265_git.git x265
        cd x265/build/linux
        cmake -G "Unix Makefiles" \
          -DCMAKE_INSTALL_PREFIX="$IOS_PREFIX" \
          -DCMAKE_BUILD_TYPE=Release \
          -DENABLE_SHARED=OFF \
          -DENABLE_CLI=OFF \
          -DENABLE_ASSEMBLY=OFF \
          -DCMAKE_OSX_ARCHITECTURES=arm64 \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=12.0 \
          -DCMAKE_OSX_SYSROOT="$IOS_SDK_PATH" \
          ../../source
        make -j$(sysctl -n hw.ncpu) && make install
        cd ../../..
        
        echo "Building libvpx (VP8/VP9) for iOS..."
        git clone --depth 1 https://chromium.googlesource.com/webm/libvpx.git
        cd libvpx
        ./configure \
          --target=arm64-darwin20-gcc \
          --prefix="$IOS_PREFIX" \
          --disable-examples \
          --disable-docs \
          --enable-vp8 \
          --enable-vp9 \
          --enable-pic \
          --disable-shared \
          --enable-static
        make -j$(sysctl -n hw.ncpu) && make install
        cd ..
        
        # Create vpx pkg-config file manually
        cat > "$IOS_PREFIX/lib/pkgconfig/vpx.pc" << EOF
        prefix=$IOS_PREFIX
        exec_prefix=\${prefix}
        libdir=\${exec_prefix}/lib
        includedir=\${prefix}/include
        
        Name: vpx
        Description: WebM VP8/VP9 Codec SDK
        Version: 1.13.1
        Requires:
        Libs: -L\${libdir} -lvpx
        Cflags: -I\${includedir}
        EOF
        
        echo "Building AV1 codec (libaom) for iOS..."
        git clone --depth 1 https://aomedia.googlesource.com/aom
        cd aom
        mkdir build_ios && cd build_ios
        cmake .. \
          -DCMAKE_INSTALL_PREFIX="$IOS_PREFIX" \
          -DCMAKE_BUILD_TYPE=Release \
          -DENABLE_SHARED=OFF \
          -DENABLE_NASM=OFF \
          -DCMAKE_OSX_ARCHITECTURES=arm64 \
          -DCMAKE_OSX_DEPLOYMENT_TARGET=12.0 \
          -DCMAKE_OSX_SYSROOT="$IOS_SDK_PATH" \
          -DENABLE_TESTS=OFF \
          -DENABLE_EXAMPLES=OFF \
          -DAOM_TARGET_CPU=arm64
        make -j$(sysctl -n hw.ncpu) && make install
        cd ../..
        
        echo "Building LAME (MP3) for iOS..."
        curl -L -o lame-3.100.tar.gz http://downloads.sourceforge.net/project/lame/lame/3.100/lame-3.100.tar.gz
        tar -xzf lame-3.100.tar.gz
        cd lame-3.100
        ./configure \
          --host=arm-apple-darwin \
          --prefix="$IOS_PREFIX" \
          --enable-static \
          --disable-shared \
          --disable-frontend
        make -j$(sysctl -n hw.ncpu) && make install
        cd ..
        
        # Create lame pkg-config file manually
        cat > "$IOS_PREFIX/lib/pkgconfig/lame.pc" << EOF
        prefix=$IOS_PREFIX
        exec_prefix=\${prefix}
        libdir=\${exec_prefix}/lib
        includedir=\${prefix}/include
        
        Name: lame
        Description: LAME MP3 Encoder
        Version: 3.100
        Requires:
        Libs: -L\${libdir} -lmp3lame
        Cflags: -I\${includedir}
        EOF
        
        echo "Building libass (subtitle rendering) for iOS..."
        
        # Build freetype first (required for libass)
        echo "Building freetype for libass..."
        curl -L -o freetype-2.13.2.tar.xz https://download.savannah.gnu.org/releases/freetype/freetype-2.13.2.tar.xz
        tar -xf freetype-2.13.2.tar.xz
        cd freetype-2.13.2
        ./configure \
          --host=arm-apple-darwin \
          --prefix="$IOS_PREFIX" \
          --enable-static \
          --disable-shared \
          --without-harfbuzz
        make -j$(sysctl -n hw.ncpu) && make install
        cd ..
        
        # Build fribidi (required for libass)
        echo "Building fribidi for libass..."
        curl -L -o fribidi-1.0.13.tar.xz https://github.com/fribidi/fribidi/releases/download/v1.0.13/fribidi-1.0.13.tar.xz
        tar -xf fribidi-1.0.13.tar.xz
        cd fribidi-1.0.13
        ./configure \
          --host=arm-apple-darwin \
          --prefix="$IOS_PREFIX" \
          --enable-static \
          --disable-shared
        make -j$(sysctl -n hw.ncpu) && make install
        cd ..
        
        # Now build libass
        git clone --depth 1 https://github.com/libass/libass.git
        cd libass
        ./autogen.sh
        ./configure \
          --host=arm-apple-darwin \
          --prefix="$IOS_PREFIX" \
          --enable-static \
          --disable-shared \
          --disable-require-system-font-provider \
          PKG_CONFIG_PATH="$IOS_PREFIX/lib/pkgconfig"
        make -j$(sysctl -n hw.ncpu) && make install
        cd ..
        
        # Create libass pkg-config file manually
        cat > "$IOS_PREFIX/lib/pkgconfig/libass.pc" << EOF
        prefix=$IOS_PREFIX
        exec_prefix=\${prefix}
        libdir=\${exec_prefix}/lib
        includedir=\${prefix}/include
        
        Name: libass
        Description: Subtitle rendering library
        Version: 0.17.0
        Requires: freetype2, fribidi
        Libs: -L\${libdir} -lass
        Cflags: -I\${includedir}
        EOF
        
        echo "Building Opus audio codec for iOS..."
        git clone --depth 1 https://github.com/xiph/opus.git
        cd opus
        ./autogen.sh
        ./configure \
          --host=arm-apple-darwin \
          --prefix="$IOS_PREFIX" \
          --enable-static \
          --disable-shared
        make -j$(sysctl -n hw.ncpu) && make install
        cd ..
        
        # Create opus pkg-config file manually if not created
        if [ ! -f "$IOS_PREFIX/lib/pkgconfig/opus.pc" ]; then
          cat > "$IOS_PREFIX/lib/pkgconfig/opus.pc" << EOF
        prefix=$IOS_PREFIX
        exec_prefix=\${prefix}
        libdir=\${exec_prefix}/lib
        includedir=\${prefix}/include
        
        Name: Opus
        Description: Opus IETF audio codec
        Version: 1.4.0
        Requires:
        Libs: -L\${libdir} -lopus
        Cflags: -I\${includedir}/opus
        EOF
        fi
        
        echo "✅ Complete iOS dependencies built successfully"
        
        # Debug: List all pkg-config files
        echo "Debug: Checking pkg-config files:"
        ls -la "$IOS_PREFIX/lib/pkgconfig/" || true
        echo "Debug: Testing pkg-config queries:"
        PKG_CONFIG_PATH="$IOS_PREFIX/lib/pkgconfig" pkg-config --exists libass && echo "libass: ✅" || echo "libass: ❌"
        PKG_CONFIG_PATH="$IOS_PREFIX/lib/pkgconfig" pkg-config --exists opus && echo "opus: ✅" || echo "opus: ❌" 
        PKG_CONFIG_PATH="$IOS_PREFIX/lib/pkgconfig" pkg-config --exists vpx && echo "vpx: ✅" || echo "vpx: ❌"
        PKG_CONFIG_PATH="$IOS_PREFIX/lib/pkgconfig" pkg-config --exists x264 && echo "x264: ✅" || echo "x264: ❌"
        
    - name: Configure build environment
      run: |
        mkdir -p build-ios
        cd build-ios
        
        export IOS_PREFIX=$PWD/../ios-build
        
        # Set up iOS cross-compilation environment
        export CC="${XCODE_PATH}/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang"
        export CXX="${XCODE_PATH}/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang++"
        export AR="${XCODE_PATH}/Toolchains/XcodeDefault.xctoolchain/usr/bin/ar"
        export NM="${XCODE_PATH}/Toolchains/XcodeDefault.xctoolchain/usr/bin/nm"
        export RANLIB="${XCODE_PATH}/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib"
        export STRIP="${XCODE_PATH}/Toolchains/XcodeDefault.xctoolchain/usr/bin/strip"
        
        # iOS-specific compilation flags
        export CFLAGS="-arch arm64 -isysroot ${IOS_SDK_PATH} -mios-version-min=${IOS_MIN_VERSION} -O3"
        export CXXFLAGS="-arch arm64 -isysroot ${IOS_SDK_PATH} -mios-version-min=${IOS_MIN_VERSION} -O3"
        export LDFLAGS="-arch arm64 -isysroot ${IOS_SDK_PATH} -mios-version-min=${IOS_MIN_VERSION}"
        
        # Set up pkg-config for our iOS libraries
        export PKG_CONFIG_PATH="$IOS_PREFIX/lib/pkgconfig:/opt/homebrew/lib/pkgconfig"
        export PKG_CONFIG_LIBDIR="$IOS_PREFIX/lib/pkgconfig"
        
        # Verify our iOS libraries
        echo "Checking iOS library installations:"
        ls -la "$IOS_PREFIX/lib/" || true
        ls -la "$IOS_PREFIX/include/" || true
        
        # Configure FFmpeg for iOS
        ../configure \
          --prefix=/var/jb/usr \
          --enable-cross-compile \
          --target-os=darwin \
          --arch=arm64 \
          --sysroot="$IOS_SDK_PATH" \
          --cc="$CC" \
          --cxx="$CXX" \
          --nm="$NM" \
          --ar="$AR" \
          --ranlib="$RANLIB" \
          --strip="$STRIP" \
          --extra-cflags="$CFLAGS -I$IOS_PREFIX/include" \
          --extra-ldflags="$LDFLAGS -L$IOS_PREFIX/lib" \
          --pkg-config-flags="--static" \
          --enable-static \
          --disable-shared \
          --enable-pthreads \
          --enable-version3 \
          --enable-gpl \
          --enable-nonfree \
          --enable-ffmpeg \
          --enable-ffplay \
          --enable-ffprobe \
          --enable-optimizations \
          \
          --enable-libx264 \
          --enable-libx265 \
          --enable-libvpx \
          --enable-libaom \
          --enable-libopus \
          --enable-libmp3lame \
          --enable-libass \
          \
          --enable-encoder=libx264 \
          --enable-encoder=libx265 \
          --enable-encoder=libvpx_vp8 \
          --enable-encoder=libvpx_vp9 \
          --enable-encoder=libaom_av1 \
          --enable-encoder=libopus \
          --enable-encoder=libmp3lame \
          --enable-encoder=aac \
          --enable-encoder=pcm_s16le \
          \
          --enable-decoder=h264 \
          --enable-decoder=hevc \
          --enable-decoder=vp8 \
          --enable-decoder=vp9 \
          --enable-decoder=av1 \
          --enable-decoder=opus \
          --enable-decoder=mp3 \
          --enable-decoder=aac \
          \
          --enable-muxer=mp4 \
          --enable-muxer=mov \
          --enable-muxer=matroska \
          --enable-muxer=webm \
          --enable-demuxer=mov \
          --enable-demuxer=matroska \
          --enable-demuxer=webm \
          --enable-parser=h264 \
          --enable-parser=hevc \
          --enable-parser=vp8 \
          --enable-parser=vp9 \
          --enable-parser=av1 \
          --enable-protocol=file \
          --enable-protocol=http \
          --enable-protocol=https \
          \
          --disable-audiotoolbox \
          --disable-videotoolbox \
          --disable-securetransport \
          --disable-iconv \
          --disable-lzma \
          --disable-bzlib \
          --disable-libxml2 \
          --disable-debug \
          --disable-doc \
          --enable-small
          
    - name: Build FFmpeg
      run: |
        cd build-ios
        make -j$(sysctl -n hw.ncpu)
        
    - name: Package build
      run: |
        mkdir -p ffmpeg-ios-arm64
        
        # Copy binaries
        cp build-ios/ffmpeg ffmpeg-ios-arm64/
        cp build-ios/ffplay ffmpeg-ios-arm64/
        cp build-ios/ffprobe ffmpeg-ios-arm64/
        
        # Create installation script
        cat > ffmpeg-ios-arm64/install.sh << 'EOF'
        #!/bin/bash
        
        # Check if running on jailbroken iOS
        if [ ! -d "/var/jb" ]; then
            echo "❌ This package requires a jailbroken iOS device with /var/jb bootstrap"
            echo "Compatible with: checkra1n, unc0ver, Taurine, Odyssey"
            exit 1
        fi
        
        echo "Installing FFmpeg 8.0 for iOS ARM64..."
        
        # Create directories
        mkdir -p /var/jb/usr/bin
        mkdir -p /var/jb/usr/share/man/man1
        
        # Copy binaries
        cp ffmpeg /var/jb/usr/bin/
        cp ffplay /var/jb/usr/bin/
        cp ffprobe /var/jb/usr/bin/
        
        # Set permissions
        chmod 755 /var/jb/usr/bin/ffmpeg
        chmod 755 /var/jb/usr/bin/ffplay
        chmod 755 /var/jb/usr/bin/ffprobe
        
        echo "✅ FFmpeg 8.0 installed successfully!"
        echo ""
        echo "📱 Usage:"
        echo "   ffmpeg -i input.mp4 output.mp3"
        echo "   ffplay video.mp4"
        echo "   ffprobe -v quiet -print_format json -show_format input.mp4"
        echo ""
        echo "🔒 Note: You may need to sign the binaries with ldid:"
        echo "   ldid -S /var/jb/usr/bin/ffmpeg"
        echo "   ldid -S /var/jb/usr/bin/ffplay"
        echo "   ldid -S /var/jb/usr/bin/ffprobe"
        EOF
        
        chmod +x ffmpeg-ios-arm64/install.sh
        
        # Create README
        cat > ffmpeg-ios-arm64/README.md << 'EOF'
        # FFmpeg 8.0 for iOS ARM64 (Jailbroken Devices)
        
        ## 🎯 Overview
        Complete FFmpeg 8.0 build optimized for jailbroken iOS devices (iOS 12.0+).
        
        ## 📋 Features
        - **Video Codecs**: H.264, H.265/HEVC, VP8, VP9, AV1
        - **Audio Codecs**: AAC, MP3, Opus, PCM
        - **Containers**: MP4, MOV, Matroska, WebM
        - **Subtitle Support**: libass for ASS/SSA rendering
        - **Network Streaming**: HTTP/HTTPS protocols
        
        ## 💾 Installation
        
        ### Method 1: Manual Installation
        1. Extract files to device
        2. Run: `./install.sh`
        3. Sign binaries: `ldid -S /var/jb/usr/bin/ffmpeg`
        
        ### Method 2: DEB Package (Recommended)
        Install via Cydia/Sileo from the provided .deb file.
        
        ## ⚡ Usage Examples
        
        ```bash
        # Convert video to different format
        ffmpeg -i input.mp4 -c:v libx264 -c:a aac output.mp4
        
        # Extract audio from video
        ffmpeg -i video.mp4 -vn -c:a libmp3lame audio.mp3
        
        # Play video
        ffplay movie.mp4
        
        # Get media information
        ffprobe -v quiet -print_format json -show_format input.mp4
        ```
        
        ## 🔧 Advanced Features
        
        ### High-Efficiency Codecs
        ```bash
        # H.265 encoding
        ffmpeg -i input.mp4 -c:v libx265 -crf 28 -c:a aac output.mp4
        
        # AV1 encoding (next-gen codec)
        ffmpeg -i input.mp4 -c:v libaom-av1 -crf 30 -c:a libopus output.webm
        
        # VP9 encoding
        ffmpeg -i input.mp4 -c:v libvpx-vp9 -crf 30 -c:a libopus output.webm
        ```
        
        ### Subtitle Rendering
        ```bash
        # Burn subtitles into video
        ffmpeg -i video.mp4 -vf "ass=subtitles.ass" output.mp4
        ```
        
        ## 🛠️ Build Information
        - **Compiler**: Xcode 15.2 Clang
        - **Target**: iOS 12.0+ ARM64
        - **Architecture**: arm64 (64-bit)
        - **Optimization**: -O3 with size optimization
        
        ## ⚠️ Requirements
        - Jailbroken iOS device (iOS 12.0 or later)
        - Bootstrap environment (/var/jb)
        - Compatible with: checkra1n, unc0ver, Taurine, Odyssey
        - Approximately 50MB storage space
        
        ## 🐛 Troubleshooting
        
        ### Permission Issues
        ```bash
        ldid -S /var/jb/usr/bin/ffmpeg
        ldid -S /var/jb/usr/bin/ffplay  
        ldid -S /var/jb/usr/bin/ffprobe
        ```
        
        ### Path Issues
        Add to your shell profile (~/.bashrc or ~/.zshrc):
        ```bash
        export PATH="/var/jb/usr/bin:$PATH"
        ```
        
        ## 📞 Support
        For issues and feature requests, visit the project repository.
        
        ---
        **Version**: 8.0  
        **Built**: $(date)  
        **Architecture**: arm64
        EOF
        
        # Create DEB package structure
        mkdir -p ffmpeg-ios-deb/DEBIAN
        mkdir -p ffmpeg-ios-deb/var/jb/usr/bin
        
        # Copy binaries to DEB structure
        cp build-ios/ffmpeg ffmpeg-ios-deb/var/jb/usr/bin/
        cp build-ios/ffplay ffmpeg-ios-deb/var/jb/usr/bin/
        cp build-ios/ffprobe ffmpeg-ios-deb/var/jb/usr/bin/
        
        # Create control file
        cat > ffmpeg-ios-deb/DEBIAN/control << EOF
        Package: com.ffmpeg.ios
        Name: FFmpeg 8.0
        Version: 8.0-1
        Architecture: iphoneos-arm64
        Description: Complete FFmpeg 8.0 suite with full codec support
         Advanced multimedia framework with support for H.264/H.265, VP8/VP9,
         AV1, MP3, AAC, Opus and many other codecs. Optimized for iOS ARM64.
        Homepage: https://github.com/RhineLT/FFmpeg
        Maintainer: RhineLT
        Author: FFmpeg Team <ffmpeg-user@ffmpeg.org>
        Section: Multimedia
        Depends: firmware (>= 12.0)
        EOF
        
        # Create postinst script
        cat > ffmpeg-ios-deb/DEBIAN/postinst << 'EOF'
        #!/bin/bash
        
        # Set proper permissions
        chmod 755 /var/jb/usr/bin/ffmpeg
        chmod 755 /var/jb/usr/bin/ffplay
        chmod 755 /var/jb/usr/bin/ffprobe
        
        # Sign binaries if ldid is available
        if command -v ldid >/dev/null 2>&1; then
            echo "Signing FFmpeg binaries..."
            ldid -S /var/jb/usr/bin/ffmpeg
            ldid -S /var/jb/usr/bin/ffplay
            ldid -S /var/jb/usr/bin/ffprobe
        else
            echo "⚠️ ldid not found. You may need to manually sign binaries:"
            echo "Run: ldid -S /var/jb/usr/bin/ffmpeg"
            echo "Run: ldid -S /var/jb/usr/bin/ffplay"  
            echo "Run: ldid -S /var/jb/usr/bin/ffprobe"
        fi
        
        echo "✅ FFmpeg 8.0 installed successfully!"
        echo "Usage: ffmpeg -i input.mp4 output.mp3"
        EOF
        
        chmod 755 ffmpeg-ios-deb/DEBIAN/postinst
        
        # Build DEB package
        dpkg-deb --build ffmpeg-ios-deb ffmpeg-8.0-ios-arm64.deb
        
        # Create archive
        tar -czf ffmpeg-8.0-ios-arm64.tar.gz ffmpeg-ios-arm64/
        
        echo "📦 Package created successfully:"
        echo "  - ffmpeg-8.0-ios-arm64.tar.gz (Manual installation)"
        echo "  - ffmpeg-8.0-ios-arm64.deb (Cydia/Sileo package)"
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ffmpeg-ios-arm64
        path: |
          ffmpeg-8.0-ios-arm64.tar.gz
          ffmpeg-8.0-ios-arm64.deb
          ffmpeg-ios-arm64/
        retention-days: 30
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: github.ref == 'refs/heads/main'
      with:
        tag_name: v8.0-ios-${{ github.run_number }}
        name: FFmpeg 8.0 for iOS ARM64 - Build ${{ github.run_number }}
        body: |
          # 🎬 FFmpeg 8.0 for iOS ARM64 (Jailbroken) 
          
          Complete FFmpeg 8.0 build optimized for jailbroken iOS devices.
          
          ## ✨ Features
          - **Complete codec support**: H.264, H.265, VP8, VP9, AV1, MP3, AAC, Opus
          - **iOS optimized**: Built with Xcode 15.2 for maximum compatibility
          - **Subtitle support**: libass for perfect subtitle rendering
          - **Network streaming**: HTTP/HTTPS protocol support
          
          ## 📱 Installation Options
          
          ### Option 1: DEB Package (Recommended)
          1. Download `ffmpeg-8.0-ios-arm64.deb`
          2. Install via Cydia/Sileo or manually with dpkg
          
          ### Option 2: Manual Installation  
          1. Download `ffmpeg-8.0-ios-arm64.tar.gz`
          2. Extract and run `./install.sh`
          3. Sign binaries:
             ```bash
             ldid -S /var/jb/usr/bin/ffmpeg
             ldid -S /var/jb/usr/bin/ffplay
             ldid -S /var/jb/usr/bin/ffprobe
             ```
          
          ## 🔧 Usage Examples
          ```bash
          # Convert video
          ffmpeg -i input.mp4 -c:v libx264 -c:a aac output.mp4
          
          # Extract audio
          ffmpeg -i video.mp4 -vn -c:a libmp3lame audio.mp3
          
          # High-efficiency encoding
          ffmpeg -i input.mp4 -c:v libx265 -crf 28 output.mp4
          
          # Next-gen AV1 encoding
          ffmpeg -i input.mp4 -c:v libaom-av1 -crf 30 output.webm
          ```
          
          ## ⚠️ Requirements
          - Jailbroken iOS 12.0+ device
          - Bootstrap environment (/var/jb)
          - Compatible with: checkra1n, unc0ver, Taurine, Odyssey
          
          ## 📊 Build Info
          - **Built**: ${{ github.event.head_commit.timestamp }}
          - **Commit**: ${{ github.sha }}
          - **Xcode**: 15.2
          - **iOS SDK**: 17.2 (targeting iOS 12.0+)
        files: |
          ffmpeg-8.0-ios-arm64.tar.gz
          ffmpeg-8.0-ios-arm64.deb
        draft: false
        prerelease: false